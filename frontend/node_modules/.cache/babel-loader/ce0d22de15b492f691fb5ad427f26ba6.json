{"ast":null,"code":"var _jsxFileName = \"/home/anand/Desktop/counter_app/src/components/counter.jsx\";\nimport React, { Component, useMemo, useState, useEffect } from 'react';\nimport Table from \"./table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 1,\n      address: {\n        street: ''\n      }\n    }\n    /* \n    - Columns is a simple array right now, but it will contain some logic later on. It is recommended by react-table to memoize the columns data\n    - Here in this example, we have grouped our columns into two headers. react-table is flexible enough to create grouped table headers\n    */\n    [(rowdata, setRowData)] = useState([]);\n  }\n\n  render() {\n    const onAddRowClick = () => {\n      setRowData(this.rowdata.concat({\n        username: \"\",\n        email: \"\",\n        gender: \"\",\n        phone: \"\"\n      }));\n    };\n\n    const columns = [{\n      Header: \"Name\",\n      accessor: \"username\"\n    }, {\n      Header: \"Email\",\n      accessor: \"email\"\n    }, {\n      Header: \"Gender\",\n      accessor: \"gender\"\n    }, {\n      Header: \"Phone\",\n      accessor: \"phone\"\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onAddRowClick,\n        className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n        children: \"Add Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center mt-8\",\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          columns: columns,\n          data: rowdata\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }\n\n  formatCount() {\n    return this.state.count === 0 ? 'Zero' : this.state.count;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/home/anand/Desktop/counter_app/src/components/counter.jsx"],"names":["React","Component","useMemo","useState","useEffect","Table","Counter","state","count","address","street","rowdata","setRowData","render","onAddRowClick","concat","username","email","gender","phone","columns","Header","accessor","formatCount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,OAA1B,EAAmCC,QAAnC,EAA6CC,SAA7C,QAA+D,OAA/D;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AACA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC5BM,KAD4B,GACpB;AACJC,MAAAA,KAAK,EAAE,CADH;AAEJC,MAAAA,OAAO,EAAG;AACNC,QAAAA,MAAM,EAAG;AADH;AAFN;AAMP;AACL;AACA;AACA;AATY,MAWVC,OAAO,EAAEC,UAXC,KAWaT,QAAQ,CAAC,EAAD,CAZD;AAAA;;AAc5BU,EAAAA,MAAM,GAAG;AAGL,UAAMC,aAAa,GAAG,MAAM;AAC5BF,MAAAA,UAAU,CACN,KAAKD,OAAL,CAAaI,MAAb,CAAoB;AAAEC,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,KAAK,EAAE,EAAvB;AAA2BC,QAAAA,MAAM,EAAE,EAAnC;AAAuCC,QAAAA,KAAK,EAAE;AAA9C,OAApB,CADM,CAAV;AAGC,KAJD;;AAMA,UAAMC,OAAO,GAAG,CAChB;AACIC,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,QAAQ,EAAE;AAFd,KADgB,EAKhB;AACID,MAAAA,MAAM,EAAE,OADZ;AAEIC,MAAAA,QAAQ,EAAE;AAFd,KALgB,EAShB;AACID,MAAAA,MAAM,EAAE,QADZ;AAEIC,MAAAA,QAAQ,EAAE;AAFd,KATgB,EAahB;AACID,MAAAA,MAAM,EAAE,OADZ;AAEIC,MAAAA,QAAQ,EAAE;AAFd,KAbgB,CAAhB;AAkBA,wBAAO;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACP;AACE,QAAA,OAAO,EAAER,aADX;AAEE,QAAA,SAAS,EAAC,sEAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADO,eAOP;AAAK,QAAA,SAAS,EAAC,0BAAf;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEM,OAAhB;AAAyB,UAAA,IAAI,EAAET;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPO;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAWH;;AACDY,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKhB,KAAL,CAAWC,KAAX,KAAqB,CAArB,GAAwB,MAAxB,GAAiC,KAAKD,KAAL,CAAWC,KAAnD;AACH;;AAvD2B;;AA0DhC,eAAeF,OAAf","sourcesContent":["import React, { Component,useMemo, useState, useEffect  } from 'react';\nimport Table from \"./table\";\nclass Counter extends Component {\n    state = { \n        count: 1,\n        address : {\n            street : ''\n        }\n    }\n     /* \n    - Columns is a simple array right now, but it will contain some logic later on. It is recommended by react-table to memoize the columns data\n    - Here in this example, we have grouped our columns into two headers. react-table is flexible enough to create grouped table headers\n  */\n   \n [rowdata, setRowData] = useState([])\n\n    render() { \n         \n\n        const onAddRowClick = () => {\n        setRowData(\n            this.rowdata.concat({ username: \"\", email: \"\", gender: \"\", phone: \"\" })\n        )\n        }\n\n        const columns = [\n        {\n            Header: \"Name\",\n            accessor: \"username\",\n        },\n        {\n            Header: \"Email\",\n            accessor: \"email\",\n        },\n        {\n            Header: \"Gender\",\n            accessor: \"gender\",\n        },\n        {\n            Header: \"Phone\",\n            accessor: \"phone\",\n        },\n        ]\n        return <div className=\"container mx-auto\">\n        <button\n          onClick={onAddRowClick}\n          className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n        >\n          Add Row\n        </button>\n        <div className=\"flex justify-center mt-8\">\n          <Table columns={columns} data={rowdata} />\n        </div>\n      </div>;\n    }\n    formatCount() {\n        return this.state.count === 0? 'Zero' : this.state.count;\n    }\n}\n \nexport default Counter;"]},"metadata":{},"sourceType":"module"}